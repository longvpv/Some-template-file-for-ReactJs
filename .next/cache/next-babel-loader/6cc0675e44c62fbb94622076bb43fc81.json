{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport createSagaMiddleware from 'redux-saga';\nimport nextReduxWrapper from 'next-redux-wrapper';\nimport rootReducer from './rootReducer';\nimport rootSaga from './rootSaga';\nvar sagaMiddleware = createSagaMiddleware();\n\nvar bindMiddleware = function bindMiddleware(middleware) {\n  if (true) {\n    var _require = require('redux-devtools-extension'),\n        composeWithDevTools = _require.composeWithDevTools;\n\n    return composeWithDevTools(applyMiddleware.apply(void 0, _toConsumableArray(middleware)));\n  }\n\n  return applyMiddleware.apply(void 0, _toConsumableArray(middleware));\n};\n\nexport function configureStore() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var store = {};\n\n  var _require2 = require('redux-persist'),\n      persistReducer = _require2.persistReducer;\n\n  var storage = require('redux-persist/lib/storage')[\"default\"];\n\n  var persistConfig = {\n    key: '.rosterspot.localstorage.app.key',\n    storage: storage,\n    whitelist: ['userProfileState']\n  };\n  var persistedReducer = persistReducer(persistConfig, rootReducer);\n  store = createStore(persistedReducer, initialState, bindMiddleware([thunkMiddleware, sagaMiddleware]));\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n}\nexport default function withRedux(BaseComponent) {\n  return nextReduxWrapper(configureStore)(BaseComponent);\n}","map":{"version":3,"sources":["C:/Long/CODE/ERP/erp.webapp/redux/withRedux.tsx"],"names":["createStore","applyMiddleware","thunkMiddleware","createSagaMiddleware","nextReduxWrapper","rootReducer","rootSaga","sagaMiddleware","bindMiddleware","middleware","require","composeWithDevTools","configureStore","initialState","store","persistReducer","storage","persistConfig","key","whitelist","persistedReducer","sagaTask","run","withRedux","BaseComponent"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,IAAMC,cAAc,GAAGJ,oBAAoB,EAA3C;;AAEA,IAAMK,cAAc,GAAG,SAAjBA,cAAiB,CAACC,UAAD,EAAqB;AAC1C,YAA2C;AAAA,mBACTC,OAAO,CAAC,0BAAD,CADE;AAAA,QACjCC,mBADiC,YACjCA,mBADiC;;AAEzC,WAAOA,mBAAmB,CAACV,eAAe,MAAf,4BAAmBQ,UAAnB,EAAD,CAA1B;AACD;;AACD,SAAOR,eAAe,MAAf,4BAAmBQ,UAAnB,EAAP;AACD,CAND;;AAQA,OAAO,SAASG,cAAT,GAAqD;AAAA,MAA7BC,YAA6B,uEAAT,EAAS;AAC1D,MAAIC,KAAU,GAAG,EAAjB;;AAD0D,kBAE/BJ,OAAO,CAAC,eAAD,CAFwB;AAAA,MAElDK,cAFkD,aAElDA,cAFkD;;AAG1D,MAAMC,OAAO,GAAGN,OAAO,CAAC,2BAAD,CAAP,WAAhB;;AACA,MAAMO,aAAkB,GAAG;AACzBC,IAAAA,GAAG,EAAE,kCADoB;AAEzBF,IAAAA,OAAO,EAAPA,OAFyB;AAGzBG,IAAAA,SAAS,EAAE,CACT,kBADS;AAHc,GAA3B;AAQA,MAAMC,gBAAgB,GAAGL,cAAc,CAACE,aAAD,EAAgBZ,WAAhB,CAAvC;AACAS,EAAAA,KAAK,GAAGd,WAAW,CACjBoB,gBADiB,EAEjBP,YAFiB,EAGjBL,cAAc,CAAC,CAACN,eAAD,EAAkBK,cAAlB,CAAD,CAHG,CAAnB;AAMAO,EAAAA,KAAK,CAACO,QAAN,GAAiBd,cAAc,CAACe,GAAf,CAAmBhB,QAAnB,CAAjB;AACA,SAAOQ,KAAP;AACD;AAGD,eAAe,SAASS,SAAT,CAAmBC,aAAnB,EAAuC;AACpD,SAAOpB,gBAAgB,CAACQ,cAAD,CAAhB,CAAiCY,aAAjC,CAAP;AACD","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport nextReduxWrapper from 'next-redux-wrapper';\r\nimport rootReducer from './rootReducer';\r\nimport rootSaga from './rootSaga'\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst bindMiddleware = (middleware: any) => {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    const { composeWithDevTools } = require('redux-devtools-extension')\r\n    return composeWithDevTools(applyMiddleware(...middleware))\r\n  }\r\n  return applyMiddleware(...middleware)\r\n}\r\n\r\nexport function configureStore(initialState: any = {}): any {\r\n  let store: any = {};\r\n  const { persistReducer } = require('redux-persist');\r\n  const storage = require('redux-persist/lib/storage').default;\r\n  const persistConfig: any = {\r\n    key: '.rosterspot.localstorage.app.key',\r\n    storage,\r\n    whitelist: [\r\n      'userProfileState'\r\n    ],\r\n  }\r\n\r\n  const persistedReducer = persistReducer(persistConfig, rootReducer)\r\n  store = createStore(\r\n    persistedReducer,\r\n    initialState,\r\n    bindMiddleware([thunkMiddleware, sagaMiddleware])\r\n  );\r\n\r\n  store.sagaTask = sagaMiddleware.run(rootSaga);\r\n  return store;\r\n}\r\n\r\n\r\nexport default function withRedux(BaseComponent: any) {\r\n  return nextReduxWrapper(configureStore)(BaseComponent)\r\n}"]},"metadata":{},"sourceType":"module"}