{"ast":null,"code":"import cookies from 'next-cookies';\nimport { Cookies } from 'react-cookie';\nimport redirectTo from './redirectTo';\nimport authenticateSettings from '../fileSettings/authenticateSettings.json';\nimport appRoutes from '../routes/appRoutes';\n\nfunction getAuthorizeRoutes() {\n  const excepts = [appRoutes.login.path, appRoutes.forgotPassword.path, appRoutes.signUp.path, appRoutes.termAndCondition.path, appRoutes.steps.path, appRoutes.registerInfo.path, appRoutes.coachAccountType.path];\n  let authorizeRoutes = [];\n\n  for (const routeField in appRoutes) {\n    const route = appRoutes[routeField];\n    if (!excepts.includes(route.path)) authorizeRoutes.push(route.path);\n  }\n\n  return authorizeRoutes;\n}\n\nexport default async function handleAuthSSR(ctx) {\n  const authorizeRoutes = getAuthorizeRoutes();\n  let token = null;\n\n  if (authorizeRoutes.includes(ctx.pathname)) {\n    if (ctx.req) {\n      const appCookie = cookies(ctx)[authenticateSettings.tokenName];\n      token = appCookie;\n    } else {\n      const cookies = new Cookies();\n      token = cookies.get(authenticateSettings.tokenName);\n    }\n\n    const isAthorized = Boolean(token);\n    if (!isAthorized) redirectTo(appRoutes.login, {\n      res: ctx.res\n    });\n  }\n}","map":{"version":3,"sources":["C:/Long/CODE/ERP/erp.webapp/libs/auth.tsx"],"names":["cookies","Cookies","redirectTo","authenticateSettings","appRoutes","getAuthorizeRoutes","excepts","login","path","forgotPassword","signUp","termAndCondition","steps","registerInfo","coachAccountType","authorizeRoutes","routeField","route","includes","push","handleAuthSSR","ctx","token","pathname","req","appCookie","tokenName","get","isAthorized","Boolean","res"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,cAApB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,oBAAP,MAAiC,2CAAjC;AACA,OAAOC,SAAP,MAAsB,qBAAtB;;AAEA,SAASC,kBAAT,GAA8B;AAC5B,QAAMC,OAAO,GAAG,CACdF,SAAS,CAACG,KAAV,CAAgBC,IADF,EAEdJ,SAAS,CAACK,cAAV,CAAyBD,IAFX,EAGdJ,SAAS,CAACM,MAAV,CAAiBF,IAHH,EAIdJ,SAAS,CAACO,gBAAV,CAA2BH,IAJb,EAKdJ,SAAS,CAACQ,KAAV,CAAgBJ,IALF,EAMdJ,SAAS,CAACS,YAAV,CAAuBL,IANT,EAOdJ,SAAS,CAACU,gBAAV,CAA2BN,IAPb,CAAhB;AAUA,MAAIO,eAAe,GAAG,EAAtB;;AACA,OAAK,MAAMC,UAAX,IAAyBZ,SAAzB,EAAoC;AAClC,UAAMa,KAAK,GAAGb,SAAS,CAACY,UAAD,CAAvB;AACA,QAAI,CAACV,OAAO,CAACY,QAAR,CAAiBD,KAAK,CAACT,IAAvB,CAAL,EACEO,eAAe,CAACI,IAAhB,CAAqBF,KAAK,CAACT,IAA3B;AACH;;AACD,SAAOO,eAAP;AACD;;AAGD,eAAe,eAAeK,aAAf,CAA6BC,GAA7B,EAAkC;AAC/C,QAAMN,eAAe,GAAGV,kBAAkB,EAA1C;AACA,MAAIiB,KAAK,GAAG,IAAZ;;AACA,MAAIP,eAAe,CAACG,QAAhB,CAAyBG,GAAG,CAACE,QAA7B,CAAJ,EAA4C;AAC1C,QAAIF,GAAG,CAACG,GAAR,EAAa;AACX,YAAMC,SAAS,GAAGzB,OAAO,CAACqB,GAAD,CAAP,CAAalB,oBAAoB,CAACuB,SAAlC,CAAlB;AACAJ,MAAAA,KAAK,GAAGG,SAAR;AACD,KAHD,MAGO;AACL,YAAMzB,OAAO,GAAG,IAAIC,OAAJ,EAAhB;AACAqB,MAAAA,KAAK,GAAGtB,OAAO,CAAC2B,GAAR,CAAYxB,oBAAoB,CAACuB,SAAjC,CAAR;AACD;;AAED,UAAME,WAAW,GAAGC,OAAO,CAACP,KAAD,CAA3B;AACA,QAAI,CAACM,WAAL,EACE1B,UAAU,CAACE,SAAS,CAACG,KAAX,EAAkB;AAAEuB,MAAAA,GAAG,EAAET,GAAG,CAACS;AAAX,KAAlB,CAAV;AACH;AACF","sourcesContent":["import cookies from 'next-cookies';\r\nimport { Cookies } from 'react-cookie';\r\nimport redirectTo from './redirectTo';\r\nimport authenticateSettings from '../fileSettings/authenticateSettings.json';\r\nimport appRoutes from '../routes/appRoutes';\r\n\r\nfunction getAuthorizeRoutes() {\r\n  const excepts = [\r\n    appRoutes.login.path,\r\n    appRoutes.forgotPassword.path,\r\n    appRoutes.signUp.path,\r\n    appRoutes.termAndCondition.path,\r\n    appRoutes.steps.path,\r\n    appRoutes.registerInfo.path,\r\n    appRoutes.coachAccountType.path\r\n  ];\r\n\r\n  let authorizeRoutes = [];\r\n  for (const routeField in appRoutes) {\r\n    const route = appRoutes[routeField];\r\n    if (!excepts.includes(route.path))\r\n      authorizeRoutes.push(route.path)\r\n  }\r\n  return authorizeRoutes;\r\n}\r\n\r\n\r\nexport default async function handleAuthSSR(ctx) {\r\n  const authorizeRoutes = getAuthorizeRoutes();\r\n  let token = null;\r\n  if (authorizeRoutes.includes(ctx.pathname)) {\r\n    if (ctx.req) {\r\n      const appCookie = cookies(ctx)[authenticateSettings.tokenName];\r\n      token = appCookie;\r\n    } else {\r\n      const cookies = new Cookies();\r\n      token = cookies.get(authenticateSettings.tokenName);\r\n    }\r\n\r\n    const isAthorized = Boolean(token);\r\n    if (!isAthorized)\r\n      redirectTo(appRoutes.login, { res: ctx.res })\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}