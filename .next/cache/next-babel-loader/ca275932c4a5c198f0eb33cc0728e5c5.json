{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport createSagaMiddleware from 'redux-saga';\nimport nextReduxWrapper from 'next-redux-wrapper';\nimport rootReducer from './rootReducer';\nimport rootSaga from './rootSaga';\nconst sagaMiddleware = createSagaMiddleware();\n\nconst bindMiddleware = middleware => {\n  if (true) {\n    const {\n      composeWithDevTools\n    } = require('redux-devtools-extension');\n\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n\n  return applyMiddleware(...middleware);\n};\n\nexport function configureStore(initialState = {}) {\n  let store = {};\n\n  const {\n    persistReducer\n  } = require('redux-persist');\n\n  const storage = require('redux-persist/lib/storage').default;\n\n  const persistConfig = {\n    key: '.rosterspot.localstorage.app.key',\n    storage,\n    whitelist: ['userProfileState']\n  };\n  const persistedReducer = persistReducer(persistConfig, rootReducer);\n  store = createStore(persistedReducer, initialState, bindMiddleware([thunkMiddleware, sagaMiddleware]));\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n}\nexport default function withRedux(BaseComponent) {\n  return nextReduxWrapper(configureStore)(BaseComponent);\n}","map":{"version":3,"sources":["C:/Long/CODE/ERP/erp.webapp/redux/withRedux.tsx"],"names":["createStore","applyMiddleware","thunkMiddleware","createSagaMiddleware","nextReduxWrapper","rootReducer","rootSaga","sagaMiddleware","bindMiddleware","middleware","composeWithDevTools","require","configureStore","initialState","store","persistReducer","storage","default","persistConfig","key","whitelist","persistedReducer","sagaTask","run","withRedux","BaseComponent"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,MAAMC,cAAc,GAAGJ,oBAAoB,EAA3C;;AAEA,MAAMK,cAAc,GAAIC,UAAD,IAAqB;AAC1C,YAA2C;AACzC,UAAM;AAAEC,MAAAA;AAAF,QAA0BC,OAAO,CAAC,0BAAD,CAAvC;;AACA,WAAOD,mBAAmB,CAACT,eAAe,CAAC,GAAGQ,UAAJ,CAAhB,CAA1B;AACD;;AACD,SAAOR,eAAe,CAAC,GAAGQ,UAAJ,CAAtB;AACD,CAND;;AAQA,OAAO,SAASG,cAAT,CAAwBC,YAAiB,GAAG,EAA5C,EAAqD;AAC1D,MAAIC,KAAU,GAAG,EAAjB;;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAqBJ,OAAO,CAAC,eAAD,CAAlC;;AACA,QAAMK,OAAO,GAAGL,OAAO,CAAC,2BAAD,CAAP,CAAqCM,OAArD;;AACA,QAAMC,aAAkB,GAAG;AACzBC,IAAAA,GAAG,EAAE,kCADoB;AAEzBH,IAAAA,OAFyB;AAGzBI,IAAAA,SAAS,EAAE,CACT,kBADS;AAHc,GAA3B;AAQA,QAAMC,gBAAgB,GAAGN,cAAc,CAACG,aAAD,EAAgBb,WAAhB,CAAvC;AACAS,EAAAA,KAAK,GAAGd,WAAW,CACjBqB,gBADiB,EAEjBR,YAFiB,EAGjBL,cAAc,CAAC,CAACN,eAAD,EAAkBK,cAAlB,CAAD,CAHG,CAAnB;AAMAO,EAAAA,KAAK,CAACQ,QAAN,GAAiBf,cAAc,CAACgB,GAAf,CAAmBjB,QAAnB,CAAjB;AACA,SAAOQ,KAAP;AACD;AAGD,eAAe,SAASU,SAAT,CAAmBC,aAAnB,EAAuC;AACpD,SAAOrB,gBAAgB,CAACQ,cAAD,CAAhB,CAAiCa,aAAjC,CAAP;AACD","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport nextReduxWrapper from 'next-redux-wrapper';\r\nimport rootReducer from './rootReducer';\r\nimport rootSaga from './rootSaga'\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst bindMiddleware = (middleware: any) => {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    const { composeWithDevTools } = require('redux-devtools-extension')\r\n    return composeWithDevTools(applyMiddleware(...middleware))\r\n  }\r\n  return applyMiddleware(...middleware)\r\n}\r\n\r\nexport function configureStore(initialState: any = {}): any {\r\n  let store: any = {};\r\n  const { persistReducer } = require('redux-persist');\r\n  const storage = require('redux-persist/lib/storage').default;\r\n  const persistConfig: any = {\r\n    key: '.rosterspot.localstorage.app.key',\r\n    storage,\r\n    whitelist: [\r\n      'userProfileState'\r\n    ],\r\n  }\r\n\r\n  const persistedReducer = persistReducer(persistConfig, rootReducer)\r\n  store = createStore(\r\n    persistedReducer,\r\n    initialState,\r\n    bindMiddleware([thunkMiddleware, sagaMiddleware])\r\n  );\r\n\r\n  store.sagaTask = sagaMiddleware.run(rootSaga);\r\n  return store;\r\n}\r\n\r\n\r\nexport default function withRedux(BaseComponent: any) {\r\n  return nextReduxWrapper(configureStore)(BaseComponent)\r\n}"]},"metadata":{},"sourceType":"module"}